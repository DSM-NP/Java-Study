- Class Loader
    JVM 내에 클래스  파일(*.class)을 로드하고 링크를 통해 배치하는 작업을 수행하는 모듈이다. 런 타임시 동적으로 클래스를 로드하고 jar 파일 내 저장된 클래스들을 JVM위에 탑재한다.
    
- Execution Engine
    클래스를 실행시키는 역할로 클래스 로더가 JVM내의 런타임 데이터 영역에 바이트 코드를 배치시키는 작업이 실행 엔진에 의해 실행된다. 자바 바이트 코드(*.class)는 기계가 바로 수행할 수 있는 언어가 아닌 사람의 언어와 비슷한 형태로 기술 된 것이기 때문에 실행 엔진은 바이트 코드를 실제로 JVM 내부에서 기계가 실행할 수 있는 형태로 변경한다.
    
    - Interpreter: 실행 엔진은 자바 바이트 코드를 명령어 단위로 읽어서 실행하지만 한 줄씩 수행하기 때문에 느리다는 단점이 있다.
    - JIT(Just In Time): 인터프리터 방식으로 실행하다가 적절한 시점에 바이트 코드 전체를 컴파일하여 기계어로 변경하고 이후 더 이상 인터프리팅 하지 않고 기계어로 직접 실행하는 방식.
    - Garbage Collector: 더이상 사용되지 않은 인스턴스를 찾아 메모리에서 삭제.
- Runtime Data Area
    프로그램을 수행하기 위해 OS에서 할당받은 메모리 공간
    
    - PC register: Thread가 시작될 때 생성되며 생성될 때마다 생성되는 공간으로 스레드마다 하나씩 존재한다. Thread가 어떤 부분을 어떤 명령으로 실행해야할 지에 대한 기록을 하는 부분으로 현재 수행 중인 JVM 명령의 주소를 갖는다.
    - JVM 스택 영역: 프로그램 실행과정에서 임시로 할당되었다가 메소드를 빠져나가면 바로 소멸되는 특성의 데이터를 저장하기 위한 영역이다.
        - 각종 형태의 변수나 임시 데이터, 스레드나 메소드의 정보를 저장한다.
        - 메소드 호출 시마다 각각의 스택 프레임(해당 메소드만을 위한 공간)이 생성된다. 메소드 수행이 끝나면 프레임 별로 삭제를 한다.
        - 메소드 안에서 사용되는 값들을 저장한다. 또 호출된 메소드의 매개변수, 지역변수, 리턴 값 및 연산 시 일어나는 값들을 임시로 저장한다.
    - Native method stack: 자바 프로그램이 컴파일되어 생성되는 바이트 코드가 아닌 실제 실행할 수 있는 기계어로 작성된 프로그램을 실행시키는 영역.
        - JAVA가 아닌 다른 언어로 작성된 코드를 위한 공간.
        - Java Native Interface를 통해 바이트 코드로 전환하여 저장하게 된다. 일반 프로그램처럼 커널이 스택을 잡아 독자적으로 프로그램을 실행시키는 영역.
    - Method Area = Class Area = Static Area
        
        클래스 정보를 처음 메모리 공간에 올릴 때 초기화되는 대상을 저장하기 위한 메모리 공간.
        
        - Runtime Constant Pool: static 영역에 존재하는 별도의 관리영역으로 상수 자료형을 저장하여 참조하고 중복을 막는 역할을 수행한다.
